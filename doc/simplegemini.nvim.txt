simplegemini.nvim.txt	Interact with Google Gemini API from inside Neovim

==============================================================================
CONTENTS                                                *SimpleGemini*

    1. Features  .......................... |SimpleGeminiFeatures|
    2. Installation  ...................... |SimpleGeminiInstallation|
    3. Configuration ...................... |SimpleGeminiConfiguration|
    4. Commands  .......................... |SimpleGeminiCommands|
    5. Functions  ......................... |SimpleGeminiFunctions|
    6. Changelog  ......................... |SimpleGeminiChangelog|
    7. Credits  ........................... |SimpleGeminiCredits|

==============================================================================
1. Features                                        *SimpleGeminiFeatures*

SimpleGemini plugin let you ask something to Google Gemini without leaving
NeoVim. The plugin is written in Lua and takes its inspiration from
askGemini.nvim. Contrary to other feature-rich plugins available on Github,
this one strives to avoid imposing a specific workflow on the user and to keep
as least opinionated as possible.

It only adds one new command and several Lua functions to your environment
(see also |SimpleGeminiCommands| and |SimpleGeminiFunctions|). It does not create
any new keymap. You have to configure them by yourself.

The plugin does not rely on third-party plugins. The plugin implementation 
is lazily loaded. There is no need to use the package manager for a lazy 
loading of the plugin.

Other features: ~

• Use any Gemini model (including the free ones)
• Setup predefined prompts for later use in the configuration options

Known limits: ~

The plugin has a number of limits, by design.

• The history of the conversation with the LLM is not kept. The AI forgets all
  your previous exchanges. This is because the plugin is designed to be used
  for small edits on a buffer, not for a full conversation.
• Calls to the Gemini API are made synchronously. This may result in some
  delay when producing the answer, but it feels more natural when updating
  text in the current buffer.

==============================================================================
2. Installation                                    *SimpleGeminiInstallation*

The plugin needs a Gemini API key to connect to the Gemini API. You have to
follow the instructions at https://aistudio.google.com/app/apikey?hl=fr

Installation with lazy.nvim ~

If you use lazy.nvim as your package manager, you can install SimpleGemini.nvim
with the following specification.
>
 return {
    [...]
    {
	'frodonh/simplegemini.nvim',
	opts = {
	    [...]
	}
    }
    [...]
 }

==============================================================================
3. Configuration                                   *SimpleGeminiConfiguration*

A few configuration options are provided. They may be defined at startup (with
require 'SimpleGemini'.setup({options}) ). {options} is a table with the
configuration options.

api_key                  Gemini API key.
                         If not set in the options, the value from the
			 'GEMINI_API_KEY' environment variable is used.

model                    Gemini model name (default is 'gemini-2.0-flash').

prompts                  Predefined prompts. Each item in this table should
                         have two keys:
			 • action: (string) Summary name of the action
			 • prompt: (string) Prompt as sent to Gemini API

==============================================================================
4. Commands                                        *SimpleGeminiCommands*

                                                        *:SimpleGemini*
:[range]SimpleGemini Buffer {prompt}
                         Ask a question to Gemini and insert answer
			 before cursor position in the current buffer. If 
			 specified, [prompt] is sent to Gemini. If not, the
			 user is asked interactively to choose between a list
			 of predefined prompts.

			 If [range] is given, the prompt is followed by a
			 newline and all the lines in the range.

:[range]SimpleGemini! Buffer {prompt}
                         Ask a question to Gemini and insert answer
			 before cursor position in the current buffer. If 
			 specified, [prompt] is sent to Gemini. If not, the
			 user is asked interactively to choose between a list
			 of predefined prompts.

			 If [range] is given, the prompt is followed by a
			 newline and all the lines in the range. Unlike
			 the previous plain version, the selection is deleted
			 before the answer is inserted.

			 In other words the selected text is used as the
			 prompt for a Gemini request, which may be preceded by
			 another prompt, and is replaced by its answer.

:[range]SimpleGemini Reg {prompt}
                         Ask a question to Gemini and fill the unnamed
			 register with the answer. If specified, {prompt} is 
			 sent to Gemini. If not, the user is asked interactively
			 to choose between a list of predefined prompts.


			 If [range] is given, the prompt is followed by a
			 newline and all the lines in the range.

:[range]SimpleGemini Reg={name} {prompt}
                         Ask a question to Gemini and fill the {name}
			 register with the answer. If specified, {prompt} is 
			 sent to Gemini. If not, the user is asked interactively
			 to choose between a list of predefined prompts.

			 {name} should be a single character specifying the
			 buffer which will be filled with the answer of the
			 request to Gemini.
			 
			 If [range] is given, the prompt is followed by a
			 newline and all the lines in the range.

:[range]SimpleGemini Scratch {prompt}
                         Ask a question to Gemini and display the answer   
                         in a new floating window. If specified, {prompt}
			 is sent to Gemini. If not, the user is asked
			 interactively to choose between a list of predefined
			 prompts.

			 The floating window can be closed by pressing <Esc>.
			 The content of the floating window is deleted when 
			 it is closed.

			 If [range] is given, the prompt is followed by a
			 newline and all the lines in the range.

==============================================================================
5. Functions                                       *SimpleGeminiFunctions*

Functions are in the 'simplegemini' module. You have to require the module to
use them. Requiring the module only loads the function declaration ; their
implementation is loaded when they are called.

setup({options})                                     *SimpleGeminiSetup*
    Configure options for the plugin.

    Parameters: ~
      • {options}   Dictionary with options. See also
	            |SimpleGeminiConfiguration| for configuration parameters.


process({args})                                      *SimpleGeminiAsk*
    Process a user command. This is the main function of the plugin. It parses
    the arguments of the command, submits a request to the LLM and populates
    some destination with the answer (either the current buffer, or a
    register, or a new scratch window).

    Parameters: ~
      • {args}      Dictionary of arguments. The table should have the same
	            structure as the {command} argument of the 
		    |nvim_create_user_command()| function (used to define new
		    commands).
		    Since this function matches the call protocol of commands,
		    it is suitable to defe new commands. It is for example
		    used by the |:SimpleGemini| command.
		    The following keys are used:
		    • args: (string) The prompt passed to the command, if any
		    • range: (number) The number of items in the range passed
		      to the function, 0 if no range was selected. If a range
		      was selected, it will be added to the prompt.
		    • line1: (number) The starting line of the command range
		    • line2: (number) The final line of the command range

    Return: ~
        Array of lines sent as answer by the LLM


send_prompt({prompt})                                *SimpleGeminiSendPrompt*
    Send a prompt the the Gemini API.

    Parameters: ~
      • {prompt}    The text of the prompt which is to be submitted.

    Return: ~
        The text of the answer of the Gemini API.

==============================================================================
6. Changelog                                       *SimpleGeminiChangelog*

Date: June 2nd, 2025
Added a feature to use predefined prompts

Date: May 29th, 2025
First version

==============================================================================
7. Credits                                         *SimpleGeminiCredits*

This plugin takes its inspiration from askGemini.nvim which is available here:
https://github.com/agusnt/askGemini.nvim/tree/main

 vim:tw=78:ts=8:noet:ft=help:norl:
